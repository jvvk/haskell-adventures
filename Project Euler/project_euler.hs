import Prelude

sumDigits n | n == 0 = 0
			| otherwise = n `mod` 10 + sumDigits (n `div` 10)

prob_56 = maximum [sumDigits (a ^ b) | a <- [1..99], b<-[1..99]]

prob_97 = (28433*(2^7830457) + 1) `mod` (10^10)

prob_10 = sum $ takeWhile (< 2000000) ps
        where ps = 2 : [i | i <- [3..], and [rem i p > 0 | p <- takeWhile ((<=i).(^2)) ps]]

prob_9 = [a*b*c | a <- [1..997], b <- [a..998], let c = 1000-a-b, a^2 + b^2 == c^2] !! 0
              
prob_8 = maximum [product $ map (\x -> digitToInt x) $ take 13 $ drop i n | i <- [0..986]]
    where n = "73167176531330624919225119674426574742355349194934\
    \96983520312774506326239578318016984801869478851843\
    \85861560789112949495459501737958331952853208805511\
    \12540698747158523863050715693290963295227443043557\
    \66896648950445244523161731856403098711121722383113\
    \62229893423380308135336276614282806444486645238749\
    \30358907296290491560440772390713810515859307960866\
    \70172427121883998797908792274921901699720888093776\
    \65727333001053367881220235421809751254540594752243\
    \52584907711670556013604839586446706324415722155397\
    \53697817977846174064955149290862569321978468622482\
    \83972241375657056057490261407972968652414535100474\
    \82166370484403199890008895243450658541227588666881\
    \16427171479924442928230863465674813919123162824586\
    \17866458359124566529476545682848912883142607690042\
    \24219022671055626321111109370544217506941658960408\
    \07198403850962455444362981230987879927244284909188\
    \84580156166097919133875499200524063689912560717606\
    \05886116467109405077541002256983155200055935729725\
    \71636269561882670428252483600823257530420752963450"
    
prob_7 = ps !! 10000 where ps = 2 : [i | i <- [3..], and [rem i p > 0 | p <- takeWhile ((<=i).(^2)) ps]]
    
prob_6 = (sum [1..100])^2 - (sum $ map (^2) [1..100])
    
prob_5 = foldl lcm 1 [1..20]

prob_4 = maximum [a*b | a <- [100..999], b <-[100..999], (show (a*b)) == (reverse $ show (a*b))]
    
prob_3 = maximum $ filter (\x -> 600851475143 `mod` x == 0)  $ takeWhile (< 775147) ps
        where ps = 2 : [i | i <- [3..], and [rem i p > 0 | p <- takeWhile ((<=i).(^2)) ps]]

prob_2 = sum $ filter even $ takeWhile (< 4000000) fibs
        where fibs = scanl (+) 0 (1:fibs)
             
prob_1 = sum [x | x <- [1..999], x `mod` 3 == 0 || x `mod` 5 ==0]